# src/core/use_cases.py

from typing import List, Callable, Dict

def generate_gitignore_content(
    selected_technologies: List[str],
    template_loader_func: Callable[[str], str]
) -> str:
    """
    Generates the combined .gitignore content based on a list of technologies.

    Args:
        selected_technologies: A list of technology names to include.
        template_loader_func: A function (dependency) that returns a template
                              content string. May raise FileNotFoundError.

    Returns:
        A single string containing the combined and formatted .gitignore content.

    Raises:
        FileNotFoundError: If a template file cannot be found by the loader.
    """
    if not selected_technologies:
        return (
            "# No se seleccionó ninguna plantilla.\n"
            "# Marca las tecnologías en la lista de la izquierda para generar un .gitignore."
        )

    header = (
        f"# Generated by GitIgnore Genius\n"
        f"# Selected technologies: {', '.join(selected_technologies)}\n"
        "#" + "="*78 + "\n\n"
    )

    all_content_parts = [header]

    for tech in selected_technologies:
        section_header = f"# Begin: {tech}\n" + "#" + "-"*78 + "\n"
        all_content_parts.append(section_header)
        
        content = template_loader_func(tech)
        all_content_parts.append(content.strip() + "\n\n")

    return "".join(all_content_parts)

