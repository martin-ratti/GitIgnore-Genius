# src/core/use_cases.py

from typing import List, Callable, Dict

def generate_gitignore_content(
    detected_technologies: List[str],
    template_loader_func: Callable[[str], str]
) -> str:
    """
    Generates the combined .gitignore content based on detected technologies.

    This is a pure business logic function. It does not know where the templates
    come from; it only knows it receives them via the `template_loader_func`.
    It orchestrates the combination of multiple template strings into one.

    Args:
        detected_technologies: A list of technology names detected in the project.
        template_loader_func: A function (dependency) that, when given a
                              technology name, returns its .gitignore template
                              content as a string.

    Returns:
        A single string containing the combined and formatted .gitignore content.
    """
    if not detected_technologies:
        return "# No technologies detected. Please select templates manually."

    # Header for the final file
    header = (
        "# Generated by GitIgnore Genius\n"
        f"# Detected technologies: {', '.join(detected_technologies)}\n"
        "#" + "="*78 + "\n\n"
    )

    all_content_parts = [header]

    for tech in detected_technologies:
        # Add a section header for each technology
        section_header = f"# Begin: {tech}\n" + "#" + "-"*78 + "\n"
        all_content_parts.append(section_header)

        # Use the injected dependency to get the template content
        content = template_loader_func(tech)
        all_content_parts.append(content.strip() + "\n\n")

    return "".join(all_content_parts)